import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
import os
from dotenv import load_dotenv
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OAUTH_TOKEN = os.getenv('OAUTH_TOKEN')
FOLDER_ID = os.getenv('FOLDER_ID')
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')


# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ settings.json
def load_settings():
    with open("settings.json", "r", encoding="utf-8") as file:
        return json.load(file)


settings = load_settings()

# –°–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
TOPICS = settings.get("topics_list")


def get_iam_token():
    response = requests.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        json={'yandexPassportOauthToken': OAUTH_TOKEN}
    )
    response.raise_for_status()
    return response.json()['iamToken']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather():
    cities = settings.get("cities_for_weather")
    weather_data = {}
    for city in cities:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru")
        if response.status_code == 200:
            data = response.json()
            weather_data[city] = {
                "temp": data["main"]["temp"],
                "description": data["weather"][0]["description"],
                "humidity": data["main"]["humidity"],
                "wind": data["wind"]["speed"]
            }
        else:
            weather_data[city] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    return weather_data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
async def send_weather_update(context: CallbackContext):
    if settings.get("send_weather") == "–ù–µ—Ç":
        return  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã –≤—ã–∫–ª—é—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    weather_data = get_weather()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    current_date = datetime.now().strftime("%d-%m-%Y %H:%M")

    message = f"üå§Ô∏è <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {current_date}:</b>\n\n"

    for city, data in weather_data.items():
        if isinstance(data, dict):
            message += f"üåç <b>{city.capitalize()}:</b>\n"
            message += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temp']}¬∞C\n"
            message += f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {data['description']}\n"
            message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n"
            message += f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {data['wind']} –º/—Å\n\n"
        else:
            message += f"<b>{city.capitalize()}:</b> {data}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    message += "#–ü–æ–≥–æ–¥–∞ #–ü—Ä–æ–≥–Ω–æ–∑ #Weather #Forecast"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="HTML")


async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –Ø {settings.get("bot_name")}')


async def process_message(update: Update, context: CallbackContext) -> None:
    user_text = update.message.text
    forwarded_text = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    if update.message.reply_to_message:
        if update.message.reply_to_message.text:
            forwarded_text = update.message.reply_to_message.text
        elif update.message.reply_to_message.caption:
            forwarded_text = update.message.reply_to_message.caption

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    combined_text = f"{user_text}\n\n–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {forwarded_text}" if forwarded_text else user_text

    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {combined_text}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–ò–º—è –±–æ—Ç–∞"
    name = settings.get("bot_name")
    if str(name).lower() not in user_text.lower():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "{name}". –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
        return

    # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
    try:
        iam_token = get_iam_token()
        logger.info(f'–ü–æ–ª—É—á–µ–Ω IAM-—Ç–æ–∫–µ–Ω: {iam_token}')
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM-—Ç–æ–∫–µ–Ω–∞: {e}')
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.')
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex GPT
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt",
        "completionOptions": {"temperature": 0.5, "maxTokens": 1000},
        "messages": [
            {"role": "system",
             "text": f"–¢—ã {settings.get('bot_name')}. {settings.get('bot_behavior')}"},
            {"role": "user", "text": combined_text}
        ]
    }

    try:
        response = requests.post(
            "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            headers={"Accept": "application/json", "Authorization": f"Bearer {iam_token}"},
            json=data
        )
        response.raise_for_status()
        result = response.json()
        logger.info(f'–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT: {result}')
        answer = result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text',
                                                                                              '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.')
        answer = answer.replace('¬´', '').replace('¬ª', '')  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏-–µ–ª–æ—á–∫–∏
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT: {e}')
        answer = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT.'

    await update.message.reply_text(answer, quote=False)


async def post_to_channel(context: CallbackContext) -> None:
    if settings.get("send_posts") == "–ù–µ—Ç":
        return  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    topic = random.choice(TOPICS)  # –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    logger.info(f'–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –ø–æ—Å—Ç–∞: {topic}')

    # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
    try:
        iam_token = get_iam_token()
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM-—Ç–æ–∫–µ–Ω–∞: {e}')
        return

    # –ó–∞–ø—Ä–æ—Å –∫ Yandex GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt",
        "completionOptions": {"temperature": 0.5, "maxTokens": 500},
        "messages": [
            {"role": "system",
             "text": "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –ø–æ—Å—Ç—ã –¥–ª—è Telegram. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã —Ç—ã —Å–æ–∑–¥–∞–µ—à—å –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏ —ç—Ç–æ–π —Ç–µ–º—ã. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –≤—ã–¥–µ–ª–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."},
            {"role": "user",
             "text": f"–¢–µ–º–∞: {topic}. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏ —ç—Ç–æ–π —Ç–µ–º—ã."}
        ]
    }

    try:
        response = requests.post(
            "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            headers={"Accept": "application/json", "Authorization": f"Bearer {iam_token}"},
            json=data
        )
        response.raise_for_status()
        result = response.json()
        post_text = result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text',
                                                                                                 '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.')
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT: {e}')
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º –∏ —ç–º–æ–¥–∑–∏
    post_message = f"*–¢–µ–º–∞:* {topic}\n\n{post_text}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å parse_mode="Markdown" –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        await context.bot.send_message(chat_id=CHAT_ID, text=post_message, parse_mode="Markdown")
        logger.info('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ Telegram: {e}')


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    scheduler = AsyncIOScheduler()

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≥–æ–¥—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if settings.get("send_weather") == "–î–∞":
        weather_time = settings.get("weather_time", "07:30").split(":")
        scheduler.add_job(send_weather_update, "cron", hour=int(weather_time[0]), minute=int(weather_time[1]),
                          timezone="Europe/Moscow", args=[application])

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if settings.get("send_posts") == "–î–∞":
        posts_interval = int(settings.get("posts_interval"))  # –ß–∏—Ç–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        scheduler.add_job(post_to_channel, "interval", minutes=posts_interval, timezone="Europe/Moscow",
                          args=[application])

    scheduler.start()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))

    application.run_polling()


if __name__ == '__main__':
    main()
